// Copyright Â© 2023 OpenIM. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package openim.conversation;

import "sdkws/sdkws.proto";
import "wrapperspb/wrapperspb.proto";

option go_package = "github.com/openimsdk/protocol/conversation";

message Conversation {
  string ownerUserID = 1;
  string conversationID = 2;
  int32 recvMsgOpt = 3;
  int32 conversationType = 4;
  string userID = 5;
  string groupID = 6;
  bool isPinned = 7;
  string attachedInfo = 8;
  bool isPrivateChat = 9;
  int32 groupAtType = 10;
  string ex = 11;
  int32 burnDuration = 12;
  int64 minSeq = 13;
  int64 maxSeq = 14;
  int64 msgDestructTime = 15;
  int64 latestMsgDestructTime = 16;
  bool isMsgDestruct = 17;
}

message ConversationReq {
  string conversationID = 1;
  int32 conversationType = 2;
  string userID = 3;
  string groupID = 4;
  openim.protobuf.Int32Value recvMsgOpt = 5;
  openim.protobuf.BoolValue isPinned = 6;
  openim.protobuf.StringValue attachedInfo = 7;
  openim.protobuf.BoolValue isPrivateChat = 8;
  openim.protobuf.StringValue ex = 9;
  openim.protobuf.Int32Value burnDuration = 10;
  openim.protobuf.Int64Value minSeq = 11;
  openim.protobuf.Int64Value maxSeq = 12;
  openim.protobuf.Int32Value groupAtType = 13;
  openim.protobuf.Int64Value msgDestructTime = 14;
  openim.protobuf.BoolValue isMsgDestruct = 15;
}

message SetConversationReq {
  Conversation conversation = 1;
}

message SetConversationResp {}

message GetConversationReq {
  string conversationID = 1;
  string ownerUserID = 2;
}

message GetConversationResp {
  Conversation conversation = 2;
}

message GetSortedConversationListReq {
  string userID = 1;
  repeated string conversationIDs = 2;
  sdkws.RequestPagination pagination = 3;
}

message GetSortedConversationListResp {
  int64 conversationTotal = 1;
  int64 unreadTotal = 2;
  repeated ConversationElem conversationElems = 3;
}

message ConversationElem {
  string conversationID = 1;
  int32 recvMsgOpt = 2;
  int64 unreadCount = 3;
  bool IsPinned = 4;
  MsgInfo msgInfo = 5;
}

message MsgInfo {
  string serverMsgID = 1;
  string clientMsgID = 2;
  int32 sessionType = 3;
  string sendID = 4;
  string recvID = 5;
  string senderName = 6;
  string faceURL = 7;
  string groupID = 8;
  string groupName = 9;
  string groupFaceURL = 10;
  int32 groupType = 11;
  uint32 groupMemberCount = 12;
  int64 LatestMsgRecvTime = 13;
  int32 msgFrom = 14;
  int32 contentType = 15;
  string content = 16;
  string ex = 17;
}

message GetConversationsReq {
  string ownerUserID = 1;
  repeated string conversationIDs = 2;
}

message GetConversationsResp {
  repeated Conversation conversations = 2;
}

message GetAllConversationsReq {
  string ownerUserID = 1;
}

message GetAllConversationsResp {
  repeated Conversation conversations = 2;
}

message GetRecvMsgNotNotifyUserIDsReq {
  string groupID = 1;
}

message GetRecvMsgNotNotifyUserIDsResp {
  repeated string userIDs = 1;
}

message CreateSingleChatConversationsReq {
  string recvID = 1;
  string sendID = 2;
  string conversationID = 3;
  int32 conversationType = 4;
}

message CreateSingleChatConversationsResp {}

message CreateGroupChatConversationsReq {
  repeated string userIDs = 1;
  string groupID = 2;
}

message CreateGroupChatConversationsResp {}

message SetConversationMaxSeqReq {
  string conversationID = 1;
  repeated string ownerUserID = 2;
  int64 maxSeq = 3;
}

message SetConversationMaxSeqResp {}

message SetConversationMinSeqReq {
  string conversationID = 1;
  repeated string ownerUserID = 2;
  int64 minSeq = 3;
}

message SetConversationMinSeqResp {}

message GetConversationIDsReq {
  string userID = 1;
}

message GetConversationIDsResp {
  repeated string conversationIDs = 1;
}

message SetConversationsReq {
  repeated string userIDs = 1;
  ConversationReq conversation = 2;
}

message SetConversationsResp {}

message GetUserConversationIDsHashReq {
  string ownerUserID = 1;
}

message GetUserConversationIDsHashResp {
  uint64 hash = 1;
}

message GetConversationsByConversationIDReq {
  repeated string conversationIDs = 1;
}

message GetConversationsByConversationIDResp {
  repeated Conversation conversations = 1;
}

message GetConversationOfflinePushUserIDsReq {
  string conversationID = 1;
  repeated string userIDs = 2;
}

message GetConversationOfflinePushUserIDsResp {
  repeated string userIDs = 1;
}

message GetConversationNotReceiveMessageUserIDsReq {
  string conversationID = 1;
}

message GetConversationNotReceiveMessageUserIDsResp {
  repeated string userIDs = 1;
}

message UpdateConversationReq {
  string conversationID = 1;
  repeated string userIDs = 2;
  openim.protobuf.Int32Value recvMsgOpt = 3;
  openim.protobuf.BoolValue isPinned = 4;
  openim.protobuf.StringValue attachedInfo = 5;
  openim.protobuf.BoolValue isPrivateChat = 6;
  openim.protobuf.StringValue ex = 7;
  openim.protobuf.Int32Value burnDuration = 8;
  openim.protobuf.Int64Value minSeq = 9;
  openim.protobuf.Int64Value maxSeq = 10;
  openim.protobuf.Int32Value groupAtType = 11;
  openim.protobuf.Int64Value msgDestructTime = 12;
  openim.protobuf.BoolValue isMsgDestruct = 13;
  openim.protobuf.Int64Value latestMsgDestructTime = 14;
}

message UpdateConversationResp {}

message GetFullOwnerConversationIDsReq {
  uint64 idHash = 1;
  string userID = 2;
}

message GetFullOwnerConversationIDsResp {
  uint64 version = 1;
  string versionID = 2;
  bool equal = 3;
  repeated string conversationIDs = 4;
}

message GetIncrementalConversationReq {
  string userID = 1;
  string versionID = 2;
  uint64 version = 3;
}

message GetIncrementalConversationResp {
  uint64 version = 1;
  string versionID = 2;
  bool full = 3;
  repeated string delete = 4;
  repeated Conversation insert = 5;
  repeated Conversation update = 6;
}

message GetOwnerConversationReq {
  string userID = 1;
  openim.sdkws.RequestPagination pagination = 2;
}

message GetOwnerConversationResp {
  int64 total = 1;
  repeated Conversation conversations = 2;
}

message GetConversationsNeedClearMsgReq {}

message GetConversationsNeedClearMsgResp {
  repeated Conversation conversations = 1;
}

message GetNotNotifyConversationIDsReq {
  string userID = 1;
}

message GetNotNotifyConversationIDsResp {
  repeated string conversationIDs = 1;
}

message GetPinnedConversationIDsReq {
  string userID = 1;
}

message GetPinnedConversationIDsResp {
  repeated string conversationIDs = 1;
}

message ClearUserConversationMsgReq {
  int64 timestamp = 1;
  int32 limit = 2;
}
message ClearUserConversationMsgResp {
  int32 count = 1;
}

message UpdateConversationsByUserReq {
  string userID = 1;
  openim.protobuf.StringValue ex = 2;
}

message UpdateConversationsByUserResp {}

message DelConversationReq {
  string ownerUserID = 1;
  int64 needDeleteTime = 2;
  repeated string conversationIDs = 3; // optional
}
message DelConversationResp {}

service conversation {
  rpc GetConversation(GetConversationReq) returns (GetConversationResp);
  rpc GetSortedConversationList(GetSortedConversationListReq) returns (GetSortedConversationListResp);
  rpc GetAllConversations(GetAllConversationsReq) returns (GetAllConversationsResp);
  rpc GetConversations(GetConversationsReq) returns (GetConversationsResp);
  rpc SetConversation(SetConversationReq) returns (SetConversationResp);
  rpc GetRecvMsgNotNotifyUserIDs(GetRecvMsgNotNotifyUserIDsReq) returns (GetRecvMsgNotNotifyUserIDsResp);
  rpc CreateSingleChatConversations(CreateSingleChatConversationsReq) returns (CreateSingleChatConversationsResp);
  rpc CreateGroupChatConversations(CreateGroupChatConversationsReq) returns (CreateGroupChatConversationsResp);
  rpc SetConversationMaxSeq(SetConversationMaxSeqReq) returns (SetConversationMaxSeqResp);
  rpc SetConversationMinSeq(SetConversationMinSeqReq) returns (SetConversationMinSeqResp);
  rpc GetConversationIDs(GetConversationIDsReq) returns (GetConversationIDsResp);
  rpc SetConversations(SetConversationsReq) returns (SetConversationsResp);
  rpc GetUserConversationIDsHash(GetUserConversationIDsHashReq) returns (GetUserConversationIDsHashResp);
  rpc GetConversationsByConversationID(GetConversationsByConversationIDReq) returns (GetConversationsByConversationIDResp);
  rpc GetConversationOfflinePushUserIDs(GetConversationOfflinePushUserIDsReq) returns (GetConversationOfflinePushUserIDsResp);
  rpc GetConversationNotReceiveMessageUserIDs(GetConversationNotReceiveMessageUserIDsReq) returns (GetConversationNotReceiveMessageUserIDsResp);
  rpc UpdateConversation(UpdateConversationReq) returns (UpdateConversationResp);
  rpc GetFullOwnerConversationIDs(GetFullOwnerConversationIDsReq) returns (GetFullOwnerConversationIDsResp);
  rpc GetIncrementalConversation(GetIncrementalConversationReq) returns (GetIncrementalConversationResp);
  rpc GetOwnerConversation(GetOwnerConversationReq) returns (GetOwnerConversationResp);
  rpc GetConversationsNeedClearMsg(GetConversationsNeedClearMsgReq) returns (GetConversationsNeedClearMsgResp);
  rpc GetNotNotifyConversationIDs(GetNotNotifyConversationIDsReq) returns (GetNotNotifyConversationIDsResp);
  rpc GetPinnedConversationIDs(GetPinnedConversationIDsReq) returns (GetPinnedConversationIDsResp);
  rpc ClearUserConversationMsg(ClearUserConversationMsgReq) returns (ClearUserConversationMsgResp);
  rpc UpdateConversationsByUser(UpdateConversationsByUserReq) returns (UpdateConversationsByUserResp);
  rpc DelConversation(DelConversationReq) returns (DelConversationResp);
}
